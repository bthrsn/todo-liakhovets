{"version":3,"sources":["components/InputBlock.tsx","App.tsx","redux/actions/AddAction.ts","reportWebVitals.ts","redux/reducers/taskReducer.ts","redux/store.ts","index.tsx"],"names":["InputBlock","addTask","useState","task","setTask","value","onChange","e","target","type","placeholder","onClick","App","tasks","useSelector","state","dispatch","useDispatch","payload","map","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","action","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAEaA,EAAkC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAE/C,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAWA,OACE,gCACE,uBACEC,MAAOF,EACPG,SAbe,SAACC,GACpBH,EAAQG,EAAEC,OAAOH,QAabI,KAAK,OACLC,YAAY,kBAGd,wBACEC,QAfc,WAClBV,EAAQE,GACRC,EAAQ,KAYN,0BCaSQ,MA7Bf,WAEE,IAAMC,EAAQC,aACZ,SAACC,GAAD,OAAWA,EAAMF,SAGbG,EAAWC,cAMjB,OACE,qCACE,0CACA,cAAC,EAAD,CAAYhB,QAPE,SAACE,GACjBa,ECbmB,SAACb,GAAD,MAA8B,CACnDM,KAAM,WACNS,QAASf,GDWEF,CAAQE,OAOf,8BACE,6BACGU,EAAMM,KAAI,SAAChB,EAAMiB,GAAP,OACT,6BACE,+BAAejB,GAAJiB,gBEdVC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uBCRRQ,EAAe,CACnBjB,MAAO,ICCIkB,EAAQC,aDEM,WAAmD,IAAlDjB,EAAiD,uDAA/Be,EAAeG,EAAgB,uCAC3E,OAAOA,EAAOxB,MACZ,IAAK,WACH,OAAO,2BAAKM,GAAZ,IAAmBF,MAAM,GAAD,mBAAME,EAAMF,OAAZ,CAAmBoB,EAAOf,YAEpD,IAAK,cACH,OAAO,2BAAKH,GAAZ,IAAmBF,MAAOE,EAAMF,MAAMqB,QAAO,SAAC/B,EAAMiB,GAAP,OAAaA,IAAMa,EAAOf,aAEzE,QACE,OAAOH,MENboB,IAASC,OACP,cAAC,IAAMC,WAAP,UACA,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAIFO,SAASC,eAAe,SAM1BlB,M","file":"static/js/main.650ef47b.chunk.js","sourcesContent":["import React, { useState, FC, ChangeEvent }  from \"react\";\r\n\r\nexport const InputBlock: FC<InputBlockProps> = ({addTask}) => {\r\n\r\n  const [task, setTask] = useState(\"\");\r\n  \r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTask(e.target.value);\r\n  }\r\n  \r\n  const handleClick = () => {\r\n    addTask(task);\r\n    setTask(\"\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input \r\n        value={task} \r\n        onChange={handleChange} \r\n        type=\"text\" \r\n        placeholder=\"Add todo task\"\r\n      >\r\n      </input>\r\n      <button \r\n        onClick={handleClick}\r\n      >\r\n        Add task\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface InputBlockProps {\r\n  addTask(task: string): void;\r\n}","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './App.css';\nimport { InputBlock } from \"./components/InputBlock\";\nimport { TaskState } from \"./redux/reducers/taskReducer\";\nimport { addTask } from \"./redux/actions/AddAction\";\n\n\nfunction App() {\n\n  const tasks = useSelector<TaskState, TaskState[\"tasks\"]>(\n    (state) => state.tasks\n  );\n  \n  const dispatch = useDispatch();\n  \n  const onAddTask = (task: string) => {\n    dispatch(addTask(task));\n  }\n    \n  return (\n    <>\n      <h1>Todo App</h1>\n      <InputBlock addTask={ onAddTask }/>\n      <div>\n        <ul>\n          {tasks.map((task, i) => \n            <li>\n              <span key={i}>{task}</span>\n            </li>\n          )}\n        </ul>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","export type AddAction = {\r\n  type: \"ADD_TASK\", payload: string\r\n}\r\n\r\nexport const addTask = (task: string): AddAction => ({\r\n  type: \"ADD_TASK\",\r\n  payload: task\r\n});\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nconst initialState = {\r\n  tasks: []\r\n}\r\n\r\nexport const taskReducer = (state:TaskState = initialState , action: any) => {\r\n  switch(action.type) {\r\n    case \"ADD_TASK\": {\r\n      return { ...state, tasks: [...state.tasks, action.payload]}\r\n    }\r\n    case \"DELETE_TASK\": {\r\n      return { ...state, tasks: state.tasks.filter((task, i) => i !== action.payload)}\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport interface TaskState {\r\n  tasks: string[]\r\n}\r\n","import { createStore } from \"redux\";\r\nimport { taskReducer } from \"./reducers/taskReducer\";\r\n\r\nexport const store = createStore(taskReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store}>\n    <App />\n  </Provider>\n  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}